/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    categories: Category;
    recipes: Recipe;
    ingredients: Ingredient;
    ingredientUnits: IngredientUnit;
    cookingMethods: CookingMethod;
    cuisines: Cuisine;
    difficultyLevels: DifficultyLevel;
    seasons: Season;
    dietaryTypes: DietaryType;
    ingredientCategories: IngredientCategory;
    continents: Continent;
    countries: Country;
    regions: Region;
    cities: City;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    recipes: RecipesSelect<false> | RecipesSelect<true>;
    ingredients: IngredientsSelect<false> | IngredientsSelect<true>;
    ingredientUnits: IngredientUnitsSelect<false> | IngredientUnitsSelect<true>;
    cookingMethods: CookingMethodsSelect<false> | CookingMethodsSelect<true>;
    cuisines: CuisinesSelect<false> | CuisinesSelect<true>;
    difficultyLevels: DifficultyLevelsSelect<false> | DifficultyLevelsSelect<true>;
    seasons: SeasonsSelect<false> | SeasonsSelect<true>;
    dietaryTypes: DietaryTypesSelect<false> | DietaryTypesSelect<true>;
    ingredientCategories: IngredientCategoriesSelect<false> | IngredientCategoriesSelect<true>;
    continents: ContinentsSelect<false> | ContinentsSelect<true>;
    countries: CountriesSelect<false> | CountriesSelect<true>;
    regions: RegionsSelect<false> | RegionsSelect<true>;
    cities: CitiesSelect<false> | CitiesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  username: string;
  firstname?: string | null;
  lastname?: string | null;
  role: 'admin' | 'editor' | 'viewer';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  /**
   * Yüklenecek görselin aspect ratio'sunu seçin
   */
  aspectRatio: '16x9' | '1x1' | '9x16';
  /**
   * Görsel için açıklama metni (kullanıcılara gösterilir)
   */
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xsmall?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xxsmall?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  /**
   * Kategorinin görünür adı
   */
  name: string;
  /**
   * Kategorinin açıklaması (SEO için önemli)
   */
  description?: string | null;
  /**
   * Bu kategori bir alt kategori ise üst kategorisini seçin
   */
  parent?: (string | null) | Category;
  JPG?: {
    jpg16x9?: (string | null) | Media;
    jpg1x1?: (string | null) | Media;
    jpg1x2?: (string | null) | Media;
  };
  PNG?: {
    png16x9?: (string | null) | Media;
    png1x1?: (string | null) | Media;
    png1x2?: (string | null) | Media;
  };
  /**
   * URL'de kullanılacak benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Kategorilerin sıralanma düzeni (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Kategorinin sitede görünür olup olmayacağı
   */
  isActive?: boolean | null;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Bu sayfa için canonical URL (opsiyonel)
   */
  canonicalUrl?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipes".
 */
export interface Recipe {
  id: string;
  /**
   * Tarifin ana başlığı
   */
  title: string;
  /**
   * Tarifin özet açıklaması (arama sonuçlarında görünür)
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Tarifin ait olduğu ana kategori
   */
  category: string | Category;
  /**
   * Tarif için etiketler (vegetarian, glutensiz, vs.)
   */
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Yatay görsel (1920x1080) - Hero, banner kullanımı için
   */
  image16x9?: (string | null) | Media;
  /**
   * Kare görsel (1080x1080) - Kart, grid kullanımı için (zorunlu)
   */
  image1x1?: (string | null) | Media;
  /**
   * Dikey görsel (1080x2160) - Mobile, story kullanımı için
   */
  image1x2?: (string | null) | Media;
  /**
   * Tarif için ek görseller (adım adım fotoğraflar, vs.)
   */
  gallery?:
    | {
        image: string | Media;
        caption?: string | null;
        /**
         * Bu görsel pişirme adımlarından biri mi?
         */
        isStepImage?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * YouTube, Vimeo veya diğer video platformu linki
   */
  videoUrl?: string | null;
  /**
   * Video için özel küçük resim (opsiyonel)
   */
  thumbnailImage?: (string | null) | Media;
  /**
   * Bu tarif kaç kişi için?
   */
  servings: number;
  /**
   * Hazırlık süresi
   */
  prepTime: number;
  /**
   * Pişirme süresi
   */
  cookingTime: number;
  /**
   * Otomatik hesaplanır
   */
  totalTime?: number | null;
  /**
   * Tarifin zorluk derecesi
   */
  difficulty: string | DifficultyLevel;
  /**
   * Hangi mutfağa ait?
   */
  cuisine?: (string | null) | Cuisine;
  /**
   * Ana pişirme yöntemi
   */
  cookingMethod?: (string | null) | CookingMethod;
  /**
   * Hangi mevsimde ideal?
   */
  season?: (string | null) | Season;
  /**
   * Özel diyet gereksinimlerine uygunluk
   */
  dietaryInfo?:
    | {
        diet?: (string | null) | DietaryType;
        id?: string | null;
      }[]
    | null;
  /**
   * Tarif için gerekli tüm malzemeler
   */
  ingredients: {
    /**
     * Listeden malzeme seçin veya yeni ekleyin
     */
    ingredient: string | Ingredient;
    amount: string;
    unit: string | IngredientUnit;
    notes?: string | null;
    /**
     * Bu malzeme opsiyonel mi?
     */
    isOptional?: boolean | null;
    /**
     * Malzeme gruplama için
     */
    category?: (string | null) | IngredientCategory;
    id?: string | null;
  }[];
  /**
   * Tarifin adım adım hazırlanışı
   */
  instructions: {
    /**
     * Bu adımda yapılacakları detaylı şekilde açıklayın
     */
    step: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    /**
     * Bu adım için görsel (opsiyonel)
     */
    image?: (string | null) | Media;
    /**
     * Bu adımın süresi (opsiyonel)
     */
    duration?: number | null;
    /**
     * Fırın sıcaklığı vs. (opsiyonel)
     */
    temperature?: number | null;
    /**
     * Bu adım için öneriler ve ipuçları
     */
    tips?: string | null;
    id?: string | null;
  }[];
  /**
   * Genel ipuçları, alternatifler ve öneriler
   */
  chefsTips?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Besin değerleri bilgileri (opsiyonel)
   */
  nutrition?: {
    /**
     * Kalori (kcal)
     */
    calories?: number | null;
    protein?: number | null;
    carbs?: number | null;
    fat?: number | null;
    fiber?: number | null;
    sugar?: number | null;
    sodium?: number | null;
    cholesterol?: number | null;
  };
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * URL'de kullanılacak benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Tarifin yayın durumu
   */
  status: 'draft' | 'published' | 'archived';
  /**
   * Ana sayfada öne çıkarılsın mı?
   */
  featured?: boolean | null;
  /**
   * Kullanıcılar yorum yapabilsin mi?
   */
  allowComments?: boolean | null;
  /**
   * Kullanıcılar puan verebilsin mi?
   */
  allowRating?: boolean | null;
  /**
   * Tarifin yayınlanma tarihi
   */
  publishedAt?: string | null;
  /**
   * Tarifi yazan kişi
   */
  author?: (string | null) | User;
  /**
   * Sadece editörler için notlar (kullanıcılara görünmez)
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "difficultyLevels".
 */
export interface DifficultyLevel {
  id: string;
  /**
   * Zorluk seviyesinin adı
   */
  name: string;
  /**
   * 1-10 arası zorluk derecesi (1 en kolay, 10 en zor)
   */
  level: number;
  /**
   * Bu zorluk seviyesi hakkında açıklama
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Bu seviye için gerekli beceriler ve deneyim
   */
  skillRequired?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Bu zorluk için tahmini süre aralığı
   */
  estimatedTime?: {
    min?: number | null;
    max?: number | null;
  };
  /**
   * Bu seviye için gerekli ön koşullar
   */
  prerequisites?:
    | {
        prerequisite?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Zorluk seviyesini temsil eden ana görsel
   */
  featuredImage?: (string | null) | Media;
  /**
   * Zorluk seviyesi için ikon
   */
  icon?: (string | null) | Media;
  /**
   * Bu seviyeyi başaran kullanıcılar için rozet
   */
  badge?: (string | null) | Media;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif seviyeler tariflerde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Bu seviye kullanıcılara görünür mü?
   */
  isVisible?: boolean | null;
  /**
   * Bu zorluk seviyesi hangi grup için uygun?
   */
  recommendedFor?: ('beginners' | 'intermediate' | 'advanced' | 'professionals') | null;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cuisines".
 */
export interface Cuisine {
  id: string;
  /**
   * Mutfağın adı
   */
  name: string;
  /**
   * Bu mutfak hakkında detaylı açıklama
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Bu mutfağın coğrafi yayılımı ve kökenleri
   */
  geographicScope?: {
    /**
     * Bu mutfağın ana kıtası (opsiyonel)
     */
    continent?: (string | null) | Continent;
    /**
     * Bu mutfağın yaygın olduğu ülkeler
     */
    countries?: (string | Country)[] | null;
    /**
     * Bu mutfağın özgün olduğu bölgeler
     */
    regions?: (string | Region)[] | null;
    /**
     * Bu mutfağın karakteristiğini aldığı şehirler
     */
    cities?: (string | City)[] | null;
  };
  /**
   * Bu mutfağın ana kimliğini belirleyen coğrafi lokasyon
   */
  primaryLocation: {
    /**
     * Bu mutfağın en spesifik lokasyon seviyesi
     */
    type: 'continent' | 'country' | 'region' | 'city';
    /**
     * Ana kıta seçimi
     */
    continent?: (string | null) | Continent;
    /**
     * Ana ülke seçimi
     */
    country?: (string | null) | Country;
    /**
     * Ana bölge seçimi
     */
    region?: (string | null) | Region;
    /**
     * Ana şehir seçimi
     */
    city?: (string | null) | City;
  };
  /**
   * Bu mutfağın karakteristik özellikleri
   */
  characteristics?:
    | {
        characteristic?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Bu mutfakta sık kullanılan malzemeler
   */
  popularIngredients?:
    | {
        ingredient?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Yatay görsel (1920x1080) - Hero, banner kullanımı için
   */
  image16x9?: (string | null) | Media;
  /**
   * Kare görsel (1080x1080) - Kart, grid kullanımı için (zorunlu)
   */
  image1x1?: (string | null) | Media;
  /**
   * Dikey görsel (1080x2160) - Mobile, story kullanımı için
   */
  image1x2?: (string | null) | Media;
  /**
   * Mutfak için ikon
   */
  icon?: (string | null) | Media;
  /**
   * Ülke bayrağı veya mutfak simgesi
   */
  flag?: (string | null) | Media;
  /**
   * URL için benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif mutfaklar tariflerde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Ana sayfada öne çıkarılsın mı?
   */
  isFeatured?: boolean | null;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "continents".
 */
export interface Continent {
  id: string;
  /**
   * Kıtanın tam adı
   */
  name: string;
  /**
   * Kıta için 2-3 harflik kod
   */
  code: string;
  /**
   * Bu kıta hakkında genel bilgiler
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Yatay görsel (1920x1080) - Hero, banner kullanımı için
   */
  image16x9?: (string | null) | Media;
  /**
   * Kare görsel (1080x1080) - Kart, grid kullanımı için (zorunlu)
   */
  image1x1?: (string | null) | Media;
  /**
   * Dikey görsel (1080x2160) - Mobile, story kullanımı için
   */
  image1x2?: (string | null) | Media;
  /**
   * Kıta için ikon
   */
  icon?: (string | null) | Media;
  /**
   * URL için benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif kıtalar sistemde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "countries".
 */
export interface Country {
  id: string;
  /**
   * Ülkenin tam adı
   */
  name: string;
  /**
   * ISO 3166-1 alfa-2 ülke kodu
   */
  code: string;
  /**
   * Bu ülkenin bulunduğu kıta
   */
  continent: string | Continent;
  /**
   * Ülkenin başkenti
   */
  capital: string;
  /**
   * Bu ülke hakkında genel bilgiler
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Yatay görsel (1920x1080) - Hero, banner kullanımı için
   */
  image16x9?: (string | null) | Media;
  /**
   * Kare görsel (1080x1080) - Kart, grid kullanımı için (zorunlu)
   */
  image1x1?: (string | null) | Media;
  /**
   * Dikey görsel (1080x2160) - Mobile, story kullanımı için
   */
  image1x2?: (string | null) | Media;
  /**
   * Ülkenin bayrağı
   */
  flag?: (string | null) | Media;
  /**
   * Ülke için ikon
   */
  icon?: (string | null) | Media;
  /**
   * URL için benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif ülkeler sistemde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions".
 */
export interface Region {
  id: string;
  /**
   * Bölgenin tam adı
   */
  name: string;
  /**
   * Bu bölgenin ait olduğu ülke
   */
  country: string | Country;
  /**
   * Bu bölgenin kategorisi
   */
  type: 'geographic' | 'administrative' | 'cultural' | 'economic';
  /**
   * Bu bölge hakkında detaylı bilgiler
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Yatay görsel (1920x1080) - Hero, banner kullanımı için
   */
  image16x9?: (string | null) | Media;
  /**
   * Kare görsel (1080x1080) - Kart, grid kullanımı için (zorunlu)
   */
  image1x1?: (string | null) | Media;
  /**
   * Dikey görsel (1080x2160) - Mobile, story kullanımı için
   */
  image1x2?: (string | null) | Media;
  /**
   * Bölge için ikon
   */
  icon?: (string | null) | Media;
  /**
   * URL için benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif bölgeler sistemde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities".
 */
export interface City {
  id: string;
  /**
   * Şehrin tam adı
   */
  name: string;
  /**
   * Şehrin hakkında açıklama
   */
  description?: string | null;
  /**
   * Bu şehir hakkında detaylı bilgiler
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Bu şehrin ait olduğu kıta
   */
  continent?: (string | null) | Continent;
  /**
   * Bu şehrin ait olduğu ülke
   */
  country?: (string | null) | Country;
  /**
   * Bu şehrin ait olduğu bölge (opsiyonel)
   */
  region?: (string | null) | Region;
  latitude?: number | null;
  longitude?: number | null;
  jpg?: {
    ratio16x9?: (string | null) | Media;
    ratio1x1?: (string | null) | Media;
    ratio9x16?: (string | null) | Media;
  };
  png?: {
    ratio16x9?: (string | null) | Media;
    ratio1x1?: (string | null) | Media;
    ratio9x16?: (string | null) | Media;
  };
  gallery?:
    | {
        title?: string | null;
        description?: string | null;
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  /**
   * URL için benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Şehirler sistemde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Meta başlık (60 karakter)
   */
  metaTitle?: string | null;
  /**
   * Meta açıklama (160 karakter)
   */
  metaDescription?: string | null;
  /**
   * Meta anahtar kelimeler
   */
  metaKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cookingMethods".
 */
export interface CookingMethod {
  id: string;
  /**
   * Pişirme yönteminin adı
   */
  name: string;
  /**
   * Bu pişirme yöntemi hakkında detaylı açıklama
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Pişirme yönteminin kategorisi
   */
  category?: ('hot-cooking' | 'cold-preparation' | 'mixed-method') | null;
  /**
   * Bu yöntem için ortalama pişirme süresi
   */
  averageTime?: number | null;
  /**
   * Bu yöntem için önerilen sıcaklık aralığı
   */
  temperature?: {
    min?: number | null;
    max?: number | null;
  };
  /**
   * Bu yöntem için gerekli araç gereçler
   */
  equipment?:
    | {
        item?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Bu pişirme yöntemi için öneriler ve ipuçları
   */
  tips?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Pişirme yöntemini temsil eden ana görsel
   */
  featuredImage?: (string | null) | Media;
  /**
   * Pişirme yöntemi için ikon
   */
  icon?: (string | null) | Media;
  /**
   * Bu pişirme yöntemini gösteren video URL'si
   */
  instructionalVideo?: string | null;
  /**
   * URL için benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif yöntemler tariflerde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Ana sayfada öne çıkarılsın mı?
   */
  isFeatured?: boolean | null;
  /**
   * Bu yöntem için gereken minimum zorluk seviyesi
   */
  difficultyRequired?: (string | null) | DifficultyLevel;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seasons".
 */
export interface Season {
  id: string;
  /**
   * Mevsimin adı
   */
  name: string;
  /**
   * Bu mevsim hakkında açıklama
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Bu mevsime ait aylar
   */
  months?:
    | {
        month?:
          | (
              | 'january'
              | 'february'
              | 'march'
              | 'april'
              | 'may'
              | 'june'
              | 'july'
              | 'august'
              | 'september'
              | 'october'
              | 'november'
              | 'december'
            )
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Mevsimin karakteristik özellikleri
   */
  characteristics?:
    | {
        characteristic?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Bu mevsimde taze olan malzemeler
   */
  popularIngredients?:
    | {
        ingredient?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Bu mevsim için özel pişirme önerileri
   */
  cookingTips?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Mevsimi temsil eden ana görsel
   */
  featuredImage?: (string | null) | Media;
  /**
   * Mevsim için ikon
   */
  icon?: (string | null) | Media;
  /**
   * Mevsim sayfası için arkaplan görseli
   */
  backgroundImage?: (string | null) | Media;
  /**
   * URL için benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif mevsimler tariflerde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Bu mevsim şu an mı? (Ana sayfada vurgulanır)
   */
  isCurrent?: boolean | null;
  /**
   * Bu mevsimin genel sıcaklık aralığı
   */
  temperatureRange?: {
    min?: number | null;
    max?: number | null;
  };
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dietaryTypes".
 */
export interface DietaryType {
  id: string;
  /**
   * Diyet türünün adı
   */
  name: string;
  /**
   * Bu diyet türü hakkında detaylı açıklama
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Diyet türünün kategorisi
   */
  category?:
    | ('dietary-restriction' | 'health-diet' | 'lifestyle' | 'allergy-intolerance' | 'religious-cultural')
    | null;
  /**
   * Bu diyette kullanılabilen malzemeler
   */
  allowedIngredients?:
    | {
        ingredient?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Bu diyette kullanılamayan malzemeler
   */
  forbiddenIngredients?:
    | {
        ingredient?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Bu diyetin potansiyel faydaları
   */
  benefits?:
    | {
        benefit?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Bu diyet sağlık nedeniyle mi yapılır?
   */
  isHealthBased?: boolean | null;
  /**
   * Bu diyet alerji/intolerans nedeniyle mi?
   */
  isAllergyBased?: boolean | null;
  /**
   * Diyet türünü temsil eden ana görsel
   */
  featuredImage?: (string | null) | Media;
  /**
   * Diyet türü için ikon
   */
  icon?: (string | null) | Media;
  /**
   * URL için benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif diyet türleri tariflerde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Ana sayfada öne çıkarılsın mı?
   */
  isFeatured?: boolean | null;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ingredients".
 */
export interface Ingredient {
  id: string;
  /**
   * Malzemenin tam adı
   */
  name: string;
  /**
   * Bu malzeme hakkında detaylı açıklama
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Bu malzeme hakkında detaylı açıklama
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Malzemenin ait olduğu kategori
   */
  category: string | IngredientCategory;
  /**
   * Bu malzeme için en yaygın kullanılan birim
   */
  defaultUnit: string | IngredientUnit;
  /**
   * Bu malzemenin taze olduğu mevsimler
   */
  seasons?: (string | Season)[] | null;
  /**
   * Bu malzemenin nasıl saklanacağı hakkında bilgi
   */
  storageInstructions?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Yatay görsel (1920x1080) - Hero, banner kullanımı için
   */
  image16x9?: (string | null) | Media;
  /**
   * Kare görsel (1080x1080) - Kart, grid kullanımı için (zorunlu)
   */
  image1x1?: (string | null) | Media;
  /**
   * Dikey görsel (1080x2160) - Mobile, story kullanımı için
   */
  image1x2?: (string | null) | Media;
  /**
   * Malzeme için küçük ikon (menülerde kullanılır)
   */
  icon?: (string | null) | Media;
  /**
   * URL için benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif malzemeler tariflerde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Bu malzemenin organik versiyonu bulunuyor mu?
   */
  isOrganic?: boolean | null;
  /**
   * Kilogram/litre başına ortalama fiyat (opsiyonel)
   */
  avgPrice?: number | null;
  /**
   * Bu malzeme ne kadar kolay bulunur?
   */
  availability?: ('common' | 'moderate' | 'rare' | 'imported') | null;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ingredientCategories".
 */
export interface IngredientCategory {
  id: string;
  /**
   * Malzeme kategorisinin adı
   */
  name: string;
  /**
   * Bu kategori hakkında açıklama
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Bu bir alt kategori ise üst kategorisini seçin
   */
  parent?: (string | null) | IngredientCategory;
  /**
   * Bu kategorideki malzemelerin genel saklama koşulları
   */
  storageInstructions?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Bu kategorinin genel beslenme değerleri hakkında bilgi
   */
  nutritionalInfo?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Bu kategorideki malzemelerin hangi mevsimlerde taze olduğu
   */
  seasonality?:
    | {
        season?: (string | null) | Season;
        id?: string | null;
      }[]
    | null;
  /**
   * Kategoriyi temsil eden ana görsel
   */
  featuredImage?: (string | null) | Media;
  /**
   * Kategori için ikon
   */
  icon?: (string | null) | Media;
  /**
   * URL için benzersiz kimlik
   */
  slug?: string | null;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif kategoriler tariflerde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Ana sayfada öne çıkarılsın mı?
   */
  isFeatured?: boolean | null;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ingredientUnits".
 */
export interface IngredientUnit {
  id: string;
  /**
   * Birimin tam adı
   */
  name: string;
  /**
   * Birimin kısa gösterimi
   */
  symbol: string;
  /**
   * Birimin türü
   */
  category: 'weight' | 'volume' | 'piece' | 'measure';
  /**
   * Birimin kullanımı hakkında bilgi
   */
  description?: string | null;
  /**
   * Temel birime dönüştürme oranı (opsiyonel)
   */
  conversionRate?: number | null;
  /**
   * Birim için ikon (opsiyonel)
   */
  icon?: (string | null) | Media;
  /**
   * Birimin nasıl ölçüldüğünü gösteren örnek görsel
   */
  exampleImage?: (string | null) | Media;
  /**
   * Listeleme sırası (düşük sayılar önce görünür)
   */
  sortOrder?: number | null;
  /**
   * Aktif birimler tariflerde kullanılabilir
   */
  isActive?: boolean | null;
  /**
   * Bu birim hassas ölçüm gerektiriyor mu?
   */
  isPrecise?: boolean | null;
  /**
   * Arama motorlarında görünecek başlık (60 karakter)
   */
  seoTitle?: string | null;
  /**
   * Arama motorlarında görünecek açıklama (160 karakter)
   */
  seoDescription?: string | null;
  /**
   * Arama motorları için anahtar kelimeler
   */
  seoKeywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'recipes';
        value: string | Recipe;
      } | null)
    | ({
        relationTo: 'ingredients';
        value: string | Ingredient;
      } | null)
    | ({
        relationTo: 'ingredientUnits';
        value: string | IngredientUnit;
      } | null)
    | ({
        relationTo: 'cookingMethods';
        value: string | CookingMethod;
      } | null)
    | ({
        relationTo: 'cuisines';
        value: string | Cuisine;
      } | null)
    | ({
        relationTo: 'difficultyLevels';
        value: string | DifficultyLevel;
      } | null)
    | ({
        relationTo: 'seasons';
        value: string | Season;
      } | null)
    | ({
        relationTo: 'dietaryTypes';
        value: string | DietaryType;
      } | null)
    | ({
        relationTo: 'ingredientCategories';
        value: string | IngredientCategory;
      } | null)
    | ({
        relationTo: 'continents';
        value: string | Continent;
      } | null)
    | ({
        relationTo: 'countries';
        value: string | Country;
      } | null)
    | ({
        relationTo: 'regions';
        value: string | Region;
      } | null)
    | ({
        relationTo: 'cities';
        value: string | City;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  username?: T;
  firstname?: T;
  lastname?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  aspectRatio?: T;
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xsmall?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xxsmall?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  parent?: T;
  JPG?:
    | T
    | {
        jpg16x9?: T;
        jpg1x1?: T;
        jpg1x2?: T;
      };
  PNG?:
    | T
    | {
        png16x9?: T;
        png1x1?: T;
        png1x2?: T;
      };
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  canonicalUrl?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipes_select".
 */
export interface RecipesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  category?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  image16x9?: T;
  image1x1?: T;
  image1x2?: T;
  gallery?:
    | T
    | {
        image?: T;
        caption?: T;
        isStepImage?: T;
        id?: T;
      };
  videoUrl?: T;
  thumbnailImage?: T;
  servings?: T;
  prepTime?: T;
  cookingTime?: T;
  totalTime?: T;
  difficulty?: T;
  cuisine?: T;
  cookingMethod?: T;
  season?: T;
  dietaryInfo?:
    | T
    | {
        diet?: T;
        id?: T;
      };
  ingredients?:
    | T
    | {
        ingredient?: T;
        amount?: T;
        unit?: T;
        notes?: T;
        isOptional?: T;
        category?: T;
        id?: T;
      };
  instructions?:
    | T
    | {
        step?: T;
        image?: T;
        duration?: T;
        temperature?: T;
        tips?: T;
        id?: T;
      };
  chefsTips?: T;
  nutrition?:
    | T
    | {
        calories?: T;
        protein?: T;
        carbs?: T;
        fat?: T;
        fiber?: T;
        sugar?: T;
        sodium?: T;
        cholesterol?: T;
      };
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  slug?: T;
  status?: T;
  featured?: T;
  allowComments?: T;
  allowRating?: T;
  publishedAt?: T;
  author?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ingredients_select".
 */
export interface IngredientsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  content?: T;
  category?: T;
  defaultUnit?: T;
  seasons?: T;
  storageInstructions?: T;
  image16x9?: T;
  image1x1?: T;
  image1x2?: T;
  icon?: T;
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  isOrganic?: T;
  avgPrice?: T;
  availability?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ingredientUnits_select".
 */
export interface IngredientUnitsSelect<T extends boolean = true> {
  name?: T;
  symbol?: T;
  category?: T;
  description?: T;
  conversionRate?: T;
  icon?: T;
  exampleImage?: T;
  sortOrder?: T;
  isActive?: T;
  isPrecise?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cookingMethods_select".
 */
export interface CookingMethodsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  category?: T;
  averageTime?: T;
  temperature?:
    | T
    | {
        min?: T;
        max?: T;
      };
  equipment?:
    | T
    | {
        item?: T;
        id?: T;
      };
  tips?: T;
  featuredImage?: T;
  icon?: T;
  instructionalVideo?: T;
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  isFeatured?: T;
  difficultyRequired?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cuisines_select".
 */
export interface CuisinesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  geographicScope?:
    | T
    | {
        continent?: T;
        countries?: T;
        regions?: T;
        cities?: T;
      };
  primaryLocation?:
    | T
    | {
        type?: T;
        continent?: T;
        country?: T;
        region?: T;
        city?: T;
      };
  characteristics?:
    | T
    | {
        characteristic?: T;
        id?: T;
      };
  popularIngredients?:
    | T
    | {
        ingredient?: T;
        id?: T;
      };
  image16x9?: T;
  image1x1?: T;
  image1x2?: T;
  icon?: T;
  flag?: T;
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  isFeatured?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "difficultyLevels_select".
 */
export interface DifficultyLevelsSelect<T extends boolean = true> {
  name?: T;
  level?: T;
  description?: T;
  skillRequired?: T;
  estimatedTime?:
    | T
    | {
        min?: T;
        max?: T;
      };
  prerequisites?:
    | T
    | {
        prerequisite?: T;
        id?: T;
      };
  featuredImage?: T;
  icon?: T;
  badge?: T;
  sortOrder?: T;
  isActive?: T;
  isVisible?: T;
  recommendedFor?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seasons_select".
 */
export interface SeasonsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  months?:
    | T
    | {
        month?: T;
        id?: T;
      };
  characteristics?:
    | T
    | {
        characteristic?: T;
        id?: T;
      };
  popularIngredients?:
    | T
    | {
        ingredient?: T;
        id?: T;
      };
  cookingTips?: T;
  featuredImage?: T;
  icon?: T;
  backgroundImage?: T;
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  isCurrent?: T;
  temperatureRange?:
    | T
    | {
        min?: T;
        max?: T;
      };
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dietaryTypes_select".
 */
export interface DietaryTypesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  category?: T;
  allowedIngredients?:
    | T
    | {
        ingredient?: T;
        id?: T;
      };
  forbiddenIngredients?:
    | T
    | {
        ingredient?: T;
        id?: T;
      };
  benefits?:
    | T
    | {
        benefit?: T;
        id?: T;
      };
  isHealthBased?: T;
  isAllergyBased?: T;
  featuredImage?: T;
  icon?: T;
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  isFeatured?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ingredientCategories_select".
 */
export interface IngredientCategoriesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  parent?: T;
  storageInstructions?: T;
  nutritionalInfo?: T;
  seasonality?:
    | T
    | {
        season?: T;
        id?: T;
      };
  featuredImage?: T;
  icon?: T;
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  isFeatured?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "continents_select".
 */
export interface ContinentsSelect<T extends boolean = true> {
  name?: T;
  code?: T;
  description?: T;
  image16x9?: T;
  image1x1?: T;
  image1x2?: T;
  icon?: T;
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "countries_select".
 */
export interface CountriesSelect<T extends boolean = true> {
  name?: T;
  code?: T;
  continent?: T;
  capital?: T;
  description?: T;
  image16x9?: T;
  image1x1?: T;
  image1x2?: T;
  flag?: T;
  icon?: T;
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions_select".
 */
export interface RegionsSelect<T extends boolean = true> {
  name?: T;
  country?: T;
  type?: T;
  description?: T;
  image16x9?: T;
  image1x1?: T;
  image1x2?: T;
  icon?: T;
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities_select".
 */
export interface CitiesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  content?: T;
  continent?: T;
  country?: T;
  region?: T;
  latitude?: T;
  longitude?: T;
  jpg?:
    | T
    | {
        ratio16x9?: T;
        ratio1x1?: T;
        ratio9x16?: T;
      };
  png?:
    | T
    | {
        ratio16x9?: T;
        ratio1x1?: T;
        ratio9x16?: T;
      };
  gallery?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        id?: T;
      };
  slug?: T;
  sortOrder?: T;
  isActive?: T;
  metaTitle?: T;
  metaDescription?: T;
  metaKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}